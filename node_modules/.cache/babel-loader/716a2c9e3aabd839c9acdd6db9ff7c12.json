{"remainingRequest":"D:\\MUI\\项目\\Tour\\node_modules\\babel-loader\\lib\\index.js!D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\MUI\\项目\\Tour\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MUI\\项目\\Tour\\node_modules\\@jiaminghi\\data-view\\lib\\components\\activeRingChart\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\MUI\\项目\\Tour\\node_modules\\@jiaminghi\\data-view\\lib\\components\\activeRingChart\\src\\main.vue","mtime":499162500000},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579498857582},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\babel-loader\\lib\\index.js","mtime":1579498894804},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579498857582},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\vue-loader\\lib\\index.js","mtime":1579498888268}],"contextDependencies":[],"result":["import _toConsumableArray from \"D:\\\\MUI\\\\\\u9879\\u76EE\\\\Tour\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\MUI\\\\\\u9879\\u76EE\\\\Tour\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.reduce\";\nimport \"core-js/modules/es6.array.map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Charts from '@jiaminghi/charts';\nimport dvDigitalFlop from \"../../digitalFlop/src/main.vue\";\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvActiveRingChart',\n  components: {\n    dvDigitalFlop: dvDigitalFlop\n  },\n  props: {\n    config: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      defaultConfig: {\n        /**\n         * @description Ring radius\n         * @type {String|Number}\n         * @default radius = '50%'\n         * @example radius = '50%' | 100\n         */\n        radius: '50%',\n\n        /**\n         * @description Active ring radius\n         * @type {String|Number}\n         * @default activeRadius = '55%'\n         * @example activeRadius = '55%' | 110\n         */\n        activeRadius: '55%',\n\n        /**\n         * @description Ring data\n         * @type {Array<Object>}\n         * @default data = [{ name: '', value: 0 }]\n         */\n        data: [{\n          name: '',\n          value: 0\n        }],\n\n        /**\n         * @description Ring line width\n         * @type {Number}\n         * @default lineWidth = 20\n         */\n        lineWidth: 20,\n\n        /**\n         * @description Active time gap (ms)\n         * @type {Number}\n         * @default activeTimeGap = 3000\n         */\n        activeTimeGap: 3000,\n\n        /**\n         * @description Ring color (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = [Charts Default Color]\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        color: [],\n\n        /**\n         * @description Digital flop style\n         * @type {Object}\n         */\n        digitalFlopStyle: {\n          fontSize: 25,\n          fill: '#fff'\n        },\n\n        /**\n         * @description Digital flop toFixed\n         * @type {Number}\n         */\n        digitalFlopToFixed: 0,\n\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50\n      },\n      mergedConfig: null,\n      chart: null,\n      activeIndex: 0,\n      animationHandler: ''\n    };\n  },\n  computed: {\n    digitalFlop: function digitalFlop() {\n      var mergedConfig = this.mergedConfig,\n          activeIndex = this.activeIndex;\n      if (!mergedConfig) return {};\n      var digitalFlopStyle = mergedConfig.digitalFlopStyle,\n          digitalFlopToFixed = mergedConfig.digitalFlopToFixed,\n          data = mergedConfig.data;\n      var value = data.map(function (_ref) {\n        var value = _ref.value;\n        return value;\n      });\n      var sum = value.reduce(function (all, v) {\n        return all + v;\n      }, 0);\n      var percent = parseFloat(value[activeIndex] / sum * 100) || 0;\n      return {\n        content: '{nt}%',\n        number: [percent],\n        style: digitalFlopStyle,\n        toFixed: digitalFlopToFixed\n      };\n    },\n    ringName: function ringName() {\n      var mergedConfig = this.mergedConfig,\n          activeIndex = this.activeIndex;\n      if (!mergedConfig) return '';\n      return mergedConfig.data[activeIndex].name;\n    },\n    fontSize: function fontSize() {\n      var mergedConfig = this.mergedConfig;\n      if (!mergedConfig) return '';\n      return \"font-size: \".concat(mergedConfig.digitalFlopStyle.fontSize, \"px;\");\n    }\n  },\n  watch: {\n    config: function config() {\n      var animationHandler = this.animationHandler,\n          mergeConfig = this.mergeConfig,\n          setRingOption = this.setRingOption;\n      clearTimeout(animationHandler);\n      this.activeIndex = 0;\n      mergeConfig();\n      setRingOption();\n    }\n  },\n  methods: {\n    init: function init() {\n      var initChart = this.initChart,\n          mergeConfig = this.mergeConfig,\n          setRingOption = this.setRingOption;\n      initChart();\n      mergeConfig();\n      setRingOption();\n    },\n    initChart: function initChart() {\n      var $refs = this.$refs;\n      this.chart = new Charts($refs['active-ring-chart']);\n    },\n    mergeConfig: function mergeConfig() {\n      var defaultConfig = this.defaultConfig,\n          config = this.config;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    setRingOption: function setRingOption() {\n      var getRingOption = this.getRingOption,\n          chart = this.chart,\n          ringAnimation = this.ringAnimation;\n      var option = getRingOption();\n      chart.setOption(option, true);\n      ringAnimation();\n    },\n    getRingOption: function getRingOption() {\n      var mergedConfig = this.mergedConfig,\n          getRealRadius = this.getRealRadius;\n      var radius = getRealRadius();\n      mergedConfig.data.forEach(function (dataItem) {\n        dataItem.radius = radius;\n      });\n      return {\n        series: [_objectSpread({\n          type: 'pie'\n        }, mergedConfig, {\n          outsideLabel: {\n            show: false\n          }\n        })],\n        color: mergedConfig.color\n      };\n    },\n    getRealRadius: function getRealRadius() {\n      var active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var mergedConfig = this.mergedConfig,\n          chart = this.chart;\n      var radius = mergedConfig.radius,\n          activeRadius = mergedConfig.activeRadius,\n          lineWidth = mergedConfig.lineWidth;\n      var maxRadius = Math.min.apply(Math, _toConsumableArray(chart.render.area)) / 2;\n      var halfLineWidth = lineWidth / 2;\n      var realRadius = active ? activeRadius : radius;\n      if (typeof realRadius !== 'number') realRadius = parseInt(realRadius) / 100 * maxRadius;\n      var insideRadius = realRadius - halfLineWidth;\n      var outSideRadius = realRadius + halfLineWidth;\n      return [insideRadius, outSideRadius];\n    },\n    ringAnimation: function ringAnimation() {\n      var _this = this;\n\n      var activeIndex = this.activeIndex,\n          getRingOption = this.getRingOption,\n          chart = this.chart,\n          getRealRadius = this.getRealRadius;\n      var radius = getRealRadius();\n      var active = getRealRadius(true);\n      var option = getRingOption();\n      var data = option.series[0].data;\n      data.forEach(function (dataItem, i) {\n        if (i === activeIndex) {\n          dataItem.radius = active;\n        } else {\n          dataItem.radius = radius;\n        }\n      });\n      chart.setOption(option, true);\n      var activeTimeGap = option.series[0].activeTimeGap;\n      this.animationHandler = setTimeout(function (foo) {\n        activeIndex += 1;\n        if (activeIndex >= data.length) activeIndex = 0;\n        _this.activeIndex = activeIndex;\n\n        _this.ringAnimation();\n      }, activeTimeGap);\n    }\n  },\n  mounted: function mounted() {\n    var init = this.init;\n    init();\n  },\n  beforeDestroy: function beforeDestroy() {\n    var animationHandler = this.animationHandler;\n    clearTimeout(animationHandler);\n  }\n};",{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-active-ring-chart\">\n    <div class=\"active-ring-chart-container\" ref=\"active-ring-chart\" />\n    <div class=\"active-ring-info\">\n      <dv-digital-flop :config=\"digitalFlop\" />\n      <div class=\"active-ring-name\" :style=\"fontSize\">{{ ringName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Charts from '@jiaminghi/charts'\n\nimport dvDigitalFlop from '../../digitalFlop/src/main.vue'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvActiveRingChart',\n  components: {\n    dvDigitalFlop\n  },\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      defaultConfig: {\n        /**\n         * @description Ring radius\n         * @type {String|Number}\n         * @default radius = '50%'\n         * @example radius = '50%' | 100\n         */\n        radius: '50%',\n        /**\n         * @description Active ring radius\n         * @type {String|Number}\n         * @default activeRadius = '55%'\n         * @example activeRadius = '55%' | 110\n         */\n        activeRadius: '55%',\n        /**\n         * @description Ring data\n         * @type {Array<Object>}\n         * @default data = [{ name: '', value: 0 }]\n         */\n        data: [{ name: '', value: 0 }],\n        /**\n         * @description Ring line width\n         * @type {Number}\n         * @default lineWidth = 20\n         */\n        lineWidth: 20,\n        /**\n         * @description Active time gap (ms)\n         * @type {Number}\n         * @default activeTimeGap = 3000\n         */\n        activeTimeGap: 3000,\n        /**\n         * @description Ring color (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = [Charts Default Color]\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        color: [],\n        /**\n         * @description Digital flop style\n         * @type {Object}\n         */\n        digitalFlopStyle: {\n          fontSize: 25,\n          fill: '#fff'\n        },\n        /**\n         * @description Digital flop toFixed\n         * @type {Number}\n         */\n        digitalFlopToFixed: 0,\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50\n      },\n\n      mergedConfig: null,\n\n      chart: null,\n\n      activeIndex: 0,\n\n      animationHandler: ''\n    }\n  },\n  computed: {\n    digitalFlop () {\n      const { mergedConfig, activeIndex } = this\n\n      if (!mergedConfig) return {}\n\n      const { digitalFlopStyle, digitalFlopToFixed, data } = mergedConfig\n\n      const value = data.map(({ value }) => value)\n\n      const sum = value.reduce((all, v) => all + v, 0)\n\n      const percent = parseFloat(value[activeIndex] / sum * 100) || 0\n\n      return {\n        content: '{nt}%',\n        number: [percent],\n        style: digitalFlopStyle,\n        toFixed: digitalFlopToFixed\n      }\n    },\n    ringName () {\n      const { mergedConfig, activeIndex } = this\n\n      if (!mergedConfig) return ''\n\n      return mergedConfig.data[activeIndex].name\n    },\n    fontSize () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      return `font-size: ${mergedConfig.digitalFlopStyle.fontSize}px;`\n    }\n  },\n  watch: {\n    config () {\n      const { animationHandler, mergeConfig, setRingOption } = this\n\n      clearTimeout(animationHandler)\n\n      this.activeIndex = 0\n\n      mergeConfig()\n\n      setRingOption()\n    }\n  },\n  methods: {\n    init () {\n      const { initChart, mergeConfig, setRingOption } = this\n\n      initChart()\n\n      mergeConfig()\n\n      setRingOption()\n    },\n    initChart () {\n      const { $refs } = this\n\n      this.chart = new Charts($refs['active-ring-chart'])\n    },\n    mergeConfig () {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    setRingOption () {\n      const { getRingOption, chart, ringAnimation } = this\n\n      const option = getRingOption()\n\n      chart.setOption(option, true)\n\n      ringAnimation()\n    },\n    getRingOption () {\n      const { mergedConfig, getRealRadius } = this\n\n      const radius = getRealRadius()\n\n      mergedConfig.data.forEach(dataItem => {\n        dataItem.radius = radius\n      })\n\n      return {\n        series: [\n          {\n            type: 'pie',\n            ...mergedConfig,\n            outsideLabel: {\n              show: false\n            }\n          }\n        ],\n        color: mergedConfig.color\n      }\n    },\n    getRealRadius (active = false) {\n      const { mergedConfig, chart } = this\n\n      const { radius, activeRadius, lineWidth } = mergedConfig\n\n      const maxRadius = Math.min(...chart.render.area) / 2\n\n      const halfLineWidth = lineWidth / 2\n\n      let realRadius = active ? activeRadius : radius\n\n      if (typeof realRadius !== 'number') realRadius = parseInt(realRadius) / 100 * maxRadius\n\n      const insideRadius = realRadius - halfLineWidth\n      const outSideRadius = realRadius + halfLineWidth\n\n      return [insideRadius, outSideRadius]\n    },\n    ringAnimation () {\n      let { activeIndex, getRingOption, chart, getRealRadius } = this\n\n      const radius = getRealRadius()\n      const active = getRealRadius(true)\n\n      const option = getRingOption()\n\n      const { data } = option.series[0]\n\n      data.forEach((dataItem, i) => {\n        if (i === activeIndex) {\n          dataItem.radius = active\n        } else {\n          dataItem.radius = radius\n        }\n      })\n\n      chart.setOption(option, true)\n\n      const { activeTimeGap } = option.series[0]\n\n      this.animationHandler = setTimeout(foo => {\n        activeIndex += 1\n\n        if (activeIndex >= data.length) activeIndex = 0\n\n        this.activeIndex = activeIndex\n\n        this.ringAnimation()\n      }, activeTimeGap)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { animationHandler } = this\n\n    clearTimeout(animationHandler)\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/activeRingChart/src"}]}
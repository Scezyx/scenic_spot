{"remainingRequest":"D:\\MUI\\项目\\Tour\\node_modules\\babel-loader\\lib\\index.js!D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\MUI\\项目\\Tour\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MUI\\项目\\Tour\\node_modules\\@jiaminghi\\data-view\\lib\\components\\charts\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\MUI\\项目\\Tour\\node_modules\\@jiaminghi\\data-view\\lib\\components\\charts\\src\\main.vue","mtime":499162500000},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579498857582},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\babel-loader\\lib\\index.js","mtime":1579498894804},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579498857582},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\vue-loader\\lib\\index.js","mtime":1579498888268}],"contextDependencies":[],"result":["import \"core-js/modules/es6.date.now\";\n//\n//\n//\n//\n//\n//\nimport autoResize from \"../../../mixin/autoResize\";\nimport Charts from '@jiaminghi/charts';\nexport default {\n  name: 'DvCharts',\n  mixins: [autoResize],\n  props: {\n    option: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    var timestamp = Date.now();\n    return {\n      ref: \"charts-container-\".concat(timestamp),\n      chartRef: \"chart-\".concat(timestamp),\n      chart: null\n    };\n  },\n  watch: {\n    option: function option() {\n      var chart = this.chart,\n          option = this.option;\n      if (!chart) return;\n      if (!option) option = {};\n      chart.setOption(option, true);\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit: function afterAutoResizeMixinInit() {\n      var initChart = this.initChart;\n      initChart();\n    },\n    initChart: function initChart() {\n      var $refs = this.$refs,\n          chartRef = this.chartRef,\n          option = this.option;\n      var chart = this.chart = new Charts($refs[chartRef]);\n      if (!option) return;\n      chart.setOption(option);\n    },\n    onResize: function onResize() {\n      var chart = this.chart;\n      if (!chart) return;\n      chart.resize();\n    }\n  }\n};",{"version":3,"sources":["main.vue"],"names":[],"mappings":";;;;;;;AAOA,OAAA,UAAA;AAEA,OAAA,MAAA,MAAA,mBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,MAAA,EAAA,CAAA,UAAA,CAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA;AADA,GAHA;AASA,EAAA,IATA,kBASA;AACA,QAAA,SAAA,GAAA,IAAA,CAAA,GAAA,EAAA;AACA,WAAA;AACA,MAAA,GAAA,6BAAA,SAAA,CADA;AAEA,MAAA,QAAA,kBAAA,SAAA,CAFA;AAIA,MAAA,KAAA,EAAA;AAJA,KAAA;AAMA,GAjBA;AAkBA,EAAA,KAAA,EAAA;AACA,IAAA,MADA,oBACA;AAAA,UACA,KADA,GACA,IADA,CACA,KADA;AAAA,UACA,MADA,GACA,IADA,CACA,MADA;AAGA,UAAA,CAAA,KAAA,EAAA;AAEA,UAAA,CAAA,MAAA,EAAA,MAAA,GAAA,EAAA;AAEA,MAAA,KAAA,CAAA,SAAA,CAAA,MAAA,EAAA,IAAA;AACA;AATA,GAlBA;AA6BA,EAAA,OAAA,EAAA;AACA,IAAA,wBADA,sCACA;AAAA,UACA,SADA,GACA,IADA,CACA,SADA;AAGA,MAAA,SAAA;AACA,KALA;AAMA,IAAA,SANA,uBAMA;AAAA,UACA,KADA,GACA,IADA,CACA,KADA;AAAA,UACA,QADA,GACA,IADA,CACA,QADA;AAAA,UACA,MADA,GACA,IADA,CACA,MADA;AAGA,UAAA,KAAA,GAAA,KAAA,KAAA,GAAA,IAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA;AAEA,UAAA,CAAA,MAAA,EAAA;AAEA,MAAA,KAAA,CAAA,SAAA,CAAA,MAAA;AACA,KAdA;AAeA,IAAA,QAfA,sBAeA;AAAA,UACA,KADA,GACA,IADA,CACA,KADA;AAGA,UAAA,CAAA,KAAA,EAAA;AAEA,MAAA,KAAA,CAAA,MAAA;AACA;AArBA;AA7BA,CAAA","sourcesContent":["<template>\n  <div class=\"dv-charts-container\" :ref=\"ref\">\n    <div class=\"charts-canvas-container\" :ref=\"chartRef\" />\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport Charts from '@jiaminghi/charts'\n\nexport default {\n  name: 'DvCharts',\n  mixins: [autoResize],\n  props: {\n    option: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const timestamp = Date.now()\n    return {\n      ref: `charts-container-${timestamp}`,\n      chartRef: `chart-${timestamp}`,\n\n      chart: null\n    }\n  },\n  watch: {\n    option () {\n      let { chart, option } = this\n\n      if (!chart) return\n\n      if (!option) option = {}\n\n      chart.setOption(option, true)\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { initChart } = this\n\n      initChart()\n    },\n    initChart () {\n      const { $refs, chartRef, option } = this\n\n      const chart = this.chart = new Charts($refs[chartRef])\n\n      if (!option) return\n\n      chart.setOption(option)\n    },\n    onResize () {\n      const { chart } = this\n\n      if (!chart) return\n\n      chart.resize()\n    }\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/charts/src"}]}
{"remainingRequest":"D:\\MUI\\项目\\Tour\\node_modules\\babel-loader\\lib\\index.js!D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\MUI\\项目\\Tour\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MUI\\项目\\Tour\\node_modules\\@jiaminghi\\data-view\\lib\\components\\digitalFlop\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\MUI\\项目\\Tour\\node_modules\\@jiaminghi\\data-view\\lib\\components\\digitalFlop\\src\\main.vue","mtime":499162500000},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579498857582},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\babel-loader\\lib\\index.js","mtime":1579498894804},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579498857582},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\vue-loader\\lib\\index.js","mtime":1579498888268}],"contextDependencies":[],"result":["import _slicedToArray from \"D:\\\\MUI\\\\\\u9879\\u76EE\\\\Tour\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\n//\n//\n//\n//\n//\n//\nimport CRender from '@jiaminghi/c-render';\nimport '@jiaminghi/charts/lib/extend/index';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvDigitalFlop',\n  props: {\n    config: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      renderer: null,\n      defaultConfig: {\n        /**\n         * @description Number for digital flop\n         * @type {Array<Number>}\n         * @default number = []\n         * @example number = [10]\n         */\n        number: [],\n\n        /**\n         * @description Content formatter\n         * @type {String}\n         * @default content = ''\n         * @example content = '{nt}个'\n         */\n        content: '',\n\n        /**\n         * @description Number toFixed\n         * @type {Number}\n         * @default toFixed = 0\n         */\n        toFixed: 0,\n\n        /**\n         * @description Text align\n         * @type {String}\n         * @default textAlign = 'center'\n         * @example textAlign = 'center' | 'left' | 'right'\n         */\n        textAlign: 'center',\n\n        /**\n         * @description Text style configuration\n         * @type {Object} {CRender Class Style}\n         */\n        style: {\n          fontSize: 30,\n          fill: '#3de7c9'\n        },\n\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50\n      },\n      mergedConfig: null,\n      graph: null\n    };\n  },\n  watch: {\n    config: function config() {\n      var update = this.update;\n      update();\n    }\n  },\n  methods: {\n    init: function init() {\n      var initRender = this.initRender,\n          mergeConfig = this.mergeConfig,\n          initGraph = this.initGraph;\n      initRender();\n      mergeConfig();\n      initGraph();\n    },\n    initRender: function initRender() {\n      var $refs = this.$refs;\n      this.renderer = new CRender($refs['digital-flop']);\n    },\n    mergeConfig: function mergeConfig() {\n      var defaultConfig = this.defaultConfig,\n          config = this.config;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    initGraph: function initGraph() {\n      var getShape = this.getShape,\n          getStyle = this.getStyle,\n          renderer = this.renderer,\n          mergedConfig = this.mergedConfig;\n      var animationCurve = mergedConfig.animationCurve,\n          animationFrame = mergedConfig.animationFrame;\n      var shape = getShape();\n      var style = getStyle();\n      this.graph = renderer.add({\n        name: 'numberText',\n        animationCurve: animationCurve,\n        animationFrame: animationFrame,\n        shape: shape,\n        style: style\n      });\n    },\n    getShape: function getShape() {\n      var _this$mergedConfig = this.mergedConfig,\n          number = _this$mergedConfig.number,\n          content = _this$mergedConfig.content,\n          toFixed = _this$mergedConfig.toFixed,\n          textAlign = _this$mergedConfig.textAlign;\n\n      var _this$renderer$area = _slicedToArray(this.renderer.area, 2),\n          w = _this$renderer$area[0],\n          h = _this$renderer$area[1];\n\n      var position = [w / 2, h / 2];\n      if (textAlign === 'left') position[0] = 0;\n      if (textAlign === 'right') position[0] = w;\n      return {\n        number: number,\n        content: content,\n        toFixed: toFixed,\n        position: position\n      };\n    },\n    getStyle: function getStyle() {\n      var _this$mergedConfig2 = this.mergedConfig,\n          style = _this$mergedConfig2.style,\n          textAlign = _this$mergedConfig2.textAlign;\n      return deepMerge(style, {\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      });\n    },\n    update: function update() {\n      var mergeConfig = this.mergeConfig,\n          mergeShape = this.mergeShape,\n          getShape = this.getShape,\n          getStyle = this.getStyle,\n          graph = this.graph,\n          mergedConfig = this.mergedConfig;\n      graph.animationEnd();\n      mergeConfig();\n      if (!graph) return;\n      var animationCurve = mergedConfig.animationCurve,\n          animationFrame = mergedConfig.animationFrame;\n      var shape = getShape();\n      var style = getStyle();\n      mergeShape(graph, shape);\n      graph.animationCurve = animationCurve;\n      graph.animationFrame = animationFrame;\n      graph.animation('style', style, true);\n      graph.animation('shape', shape);\n    },\n    mergeShape: function mergeShape(graph, shape) {\n      var cacheNum = graph.shape.number.length;\n      var shapeNum = shape.number.length;\n      if (cacheNum !== shapeNum) graph.shape.number = shape.number;\n    }\n  },\n  mounted: function mounted() {\n    var init = this.init;\n    init();\n  }\n};",{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-digital-flop\">\n    <canvas ref=\"digital-flop\" />\n  </div>\n</template>\n\n<script>\nimport CRender from '@jiaminghi/c-render'\n\nimport '@jiaminghi/charts/lib/extend/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDigitalFlop',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      renderer: null,\n\n      defaultConfig: {\n        /**\n         * @description Number for digital flop\n         * @type {Array<Number>}\n         * @default number = []\n         * @example number = [10]\n         */\n        number: [],\n        /**\n         * @description Content formatter\n         * @type {String}\n         * @default content = ''\n         * @example content = '{nt}个'\n         */\n        content: '',\n        /**\n         * @description Number toFixed\n         * @type {Number}\n         * @default toFixed = 0\n         */\n        toFixed: 0,\n        /**\n         * @description Text align\n         * @type {String}\n         * @default textAlign = 'center'\n         * @example textAlign = 'center' | 'left' | 'right'\n         */\n        textAlign: 'center',\n        /**\n         * @description Text style configuration\n         * @type {Object} {CRender Class Style}\n         */\n        style: {\n          fontSize: 30,\n          fill: '#3de7c9'\n        },\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50\n      },\n\n      mergedConfig: null,\n\n      graph: null\n    }\n  },\n  watch: {\n    config () {\n      const { update } = this\n\n      update()\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, mergeConfig, initGraph } = this\n\n      initRender()\n\n      mergeConfig()\n\n      initGraph()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['digital-flop'])\n    },\n    mergeConfig () {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    initGraph () {\n      const { getShape, getStyle, renderer, mergedConfig } = this\n\n      const { animationCurve, animationFrame } = mergedConfig\n\n      const shape = getShape()\n      const style = getStyle()\n\n      this.graph = renderer.add({\n        name: 'numberText',\n        animationCurve,\n        animationFrame,\n        shape,\n        style\n      })\n    },\n    getShape () {\n      const { number, content, toFixed, textAlign } = this.mergedConfig\n\n      const [w, h] = this.renderer.area\n\n      const position = [w / 2, h / 2]\n\n      if (textAlign === 'left') position[0] = 0\n      if (textAlign === 'right') position[0] = w\n\n      return {\n        number,\n        content,\n        toFixed,\n        position\n      }\n    },\n    getStyle () {\n      const { style, textAlign } = this.mergedConfig\n\n      return deepMerge(style, {\n        textAlign,\n        textBaseline: 'middle'\n      })\n    },\n    update () {\n      const { mergeConfig, mergeShape, getShape, getStyle, graph, mergedConfig } = this\n\n      graph.animationEnd()\n\n      mergeConfig()\n\n      if (!graph) return\n\n      const { animationCurve, animationFrame } = mergedConfig\n\n      const shape = getShape()\n      const style = getStyle()\n\n      mergeShape(graph, shape)\n\n      graph.animationCurve = animationCurve\n      graph.animationFrame = animationFrame\n\n      graph.animation('style', style, true)\n      graph.animation('shape', shape)\n    },\n    mergeShape (graph, shape) {\n      const cacheNum = graph.shape.number.length\n      const shapeNum = shape.number.length\n\n      if (cacheNum !== shapeNum) graph.shape.number = shape.number\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/digitalFlop/src"}]}
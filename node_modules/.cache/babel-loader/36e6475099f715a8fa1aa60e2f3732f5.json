{"remainingRequest":"D:\\MUI\\项目\\Tour\\node_modules\\babel-loader\\lib\\index.js!D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\MUI\\项目\\Tour\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MUI\\项目\\Tour\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\MUI\\项目\\Tour\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue","mtime":499162500000},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579498857582},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\babel-loader\\lib\\index.js","mtime":1579498894804},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579498857582},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\vue-loader\\lib\\index.js","mtime":1579498888268}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\MUI\\\\\\u9879\\u76EE\\\\Tour\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.fill\";\nimport _slicedToArray from \"D:\\\\MUI\\\\\\u9879\\u76EE\\\\Tour\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _toConsumableArray from \"D:\\\\MUI\\\\\\u9879\\u76EE\\\\Tour\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.date.now\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nimport CRender from '@jiaminghi/c-render';\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: function _default() {\n      return {};\n    }\n  },\n  data: function data() {\n    var timestamp = Date.now();\n    return {\n      gradientId: \"water-level-pond-\".concat(timestamp),\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n      mergedConfig: {},\n      renderer: null,\n      svgBorderGradient: [],\n      details: '',\n      waves: [],\n      animation: false\n    };\n  },\n  computed: {\n    radius: function radius() {\n      var shape = this.mergedConfig.shape;\n      if (shape === 'round') return '50%';\n      if (shape === 'rect') return '0';\n      if (shape === 'roundRect') return '10px';\n      return '0';\n    },\n    shape: function shape() {\n      var shape = this.mergedConfig.shape;\n      if (!shape) return 'rect';\n      return shape;\n    }\n  },\n  watch: {\n    config: function config() {\n      var calcData = this.calcData,\n          renderer = this.renderer;\n      renderer.delAllGraph();\n      this.waves = [];\n      setTimeout(calcData, 0);\n    }\n  },\n  methods: {\n    init: function init() {\n      var initRender = this.initRender,\n          config = this.config,\n          calcData = this.calcData;\n      initRender();\n      if (!config) return;\n      calcData();\n    },\n    initRender: function initRender() {\n      var $refs = this.$refs;\n      this.renderer = new CRender($refs['water-pond-level']);\n    },\n    calcData: function calcData() {\n      var mergeConfig = this.mergeConfig,\n          calcSvgBorderGradient = this.calcSvgBorderGradient,\n          calcDetails = this.calcDetails;\n      mergeConfig();\n      calcSvgBorderGradient();\n      calcDetails();\n      var addWave = this.addWave,\n          animationWave = this.animationWave;\n      addWave();\n      animationWave();\n    },\n    mergeConfig: function mergeConfig() {\n      var config = this.config,\n          defaultConfig = this.defaultConfig;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config);\n    },\n    calcSvgBorderGradient: function calcSvgBorderGradient() {\n      var colors = this.mergedConfig.colors;\n      var colorNum = colors.length;\n      var colorOffsetGap = 100 / (colorNum - 1);\n      this.svgBorderGradient = colors.map(function (c, i) {\n        return [colorOffsetGap * i, c];\n      });\n    },\n    calcDetails: function calcDetails() {\n      var _this$mergedConfig = this.mergedConfig,\n          data = _this$mergedConfig.data,\n          formatter = _this$mergedConfig.formatter;\n\n      if (!data.length) {\n        this.details = '';\n        return;\n      }\n\n      var maxValue = Math.max.apply(Math, _toConsumableArray(data));\n      this.details = formatter.replace('{value}', maxValue);\n    },\n    addWave: function addWave() {\n      var renderer = this.renderer,\n          getWaveShapes = this.getWaveShapes,\n          getWaveStyle = this.getWaveStyle,\n          drawed = this.drawed;\n      var shapes = getWaveShapes();\n      var style = getWaveStyle();\n      this.waves = shapes.map(function (shape) {\n        return renderer.add({\n          name: 'smoothline',\n          animationFrame: 300,\n          shape: shape,\n          style: style,\n          drawed: drawed\n        });\n      });\n    },\n    getWaveShapes: function getWaveShapes() {\n      var mergedConfig = this.mergedConfig,\n          renderer = this.renderer,\n          mergeOffset = this.mergeOffset;\n      var waveNum = mergedConfig.waveNum,\n          waveHeight = mergedConfig.waveHeight,\n          data = mergedConfig.data;\n\n      var _renderer$area = _slicedToArray(renderer.area, 2),\n          w = _renderer$area[0],\n          h = _renderer$area[1];\n\n      var pointsNum = waveNum * 4 + 4;\n      var pointXGap = w / waveNum / 2;\n      return data.map(function (v) {\n        var points = new Array(pointsNum).fill(0).map(function (foo, j) {\n          var x = w - pointXGap * j;\n          var startY = (1 - v / 100) * h;\n          var y = j % 2 === 0 ? startY : startY - waveHeight;\n          return [x, y];\n        });\n        points = points.map(function (p) {\n          return mergeOffset(p, [pointXGap * 2, 0]);\n        });\n        return {\n          points: points\n        };\n      });\n    },\n    mergeOffset: function mergeOffset(_ref, _ref2) {\n      var _ref3 = _slicedToArray(_ref, 2),\n          x = _ref3[0],\n          y = _ref3[1];\n\n      var _ref4 = _slicedToArray(_ref2, 2),\n          ox = _ref4[0],\n          oy = _ref4[1];\n\n      return [x + ox, y + oy];\n    },\n    getWaveStyle: function getWaveStyle() {\n      var renderer = this.renderer,\n          mergedConfig = this.mergedConfig;\n      var h = renderer.area[1];\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      };\n    },\n    drawed: function drawed(_ref5, _ref6) {\n      var points = _ref5.shape.points;\n      var ctx = _ref6.ctx,\n          area = _ref6.area;\n      var firstPoint = points[0];\n      var lastPoint = points.slice(-1)[0];\n      var h = area[1];\n      ctx.lineTo(lastPoint[0], h);\n      ctx.lineTo(firstPoint[0], h);\n      ctx.closePath();\n      ctx.fill();\n    },\n    animationWave: function () {\n      var _animationWave = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var repeat,\n            waves,\n            renderer,\n            animation,\n            w,\n            _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                repeat = _args.length > 0 && _args[0] !== undefined ? _args[0] : 1;\n                waves = this.waves, renderer = this.renderer, animation = this.animation;\n\n                if (!animation) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                this.animation = true;\n                w = renderer.area[0];\n                waves.forEach(function (graph) {\n                  graph.attr('style', {\n                    translate: [0, 0]\n                  });\n                  graph.animation('style', {\n                    translate: [w, 0]\n                  }, true);\n                });\n                _context.next = 9;\n                return renderer.launchAnimation();\n\n              case 9:\n                this.animation = false;\n\n                if (renderer.graphs.length) {\n                  _context.next = 12;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 12:\n                this.animationWave(repeat + 1);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function animationWave() {\n        return _animationWave.apply(this, arguments);\n      }\n\n      return animationWave;\n    }()\n  },\n  mounted: function mounted() {\n    var init = this.init;\n    init();\n  },\n  beforeDestroy: function beforeDestroy() {\n    var renderer = this.renderer;\n    renderer.delAllGraph();\n    this.waves = [];\n  }\n};",{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-water-pond-level\">\n    <svg v-if=\"renderer\">\n      <defs>\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\n            :offset=\"lc[0]\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n\n      <text\n        v-if=\"renderer\"\n        :stroke=\"`url(#${gradientId})`\"\n        :fill=\"`url(#${gradientId})`\"\n        :x=\"renderer.area[0] / 2 + 8\"\n        :y=\"renderer.area[1] / 2 + 8\"\n      >\n        {{ details }}\n      </text>\n\n      <ellipse v-if=\"!shape || shape === 'round'\"\n        :cx=\"renderer.area[0] / 2 + 8\"\n        :cy=\"renderer.area[1] / 2 + 8\"\n        :rx=\"renderer.area[0] / 2 + 5\"\n        :ry=\"renderer.area[1] / 2 + 5\"\n        :stroke=\"`url(#${gradientId})`\" />\n\n      <rect v-else\n        x=\"2\" y=\"2\"\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\n        :width=\"renderer.area[0] + 12\"\n        :height=\"renderer.area[1] + 12\"\n        :stroke=\"`url(#${gradientId})`\" />\n    </svg>\n\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport CRender from '@jiaminghi/c-render'\n\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: () => ({})\n  },\n  data () {\n    const timestamp = Date.now()\n    return {\n      gradientId: `water-level-pond-${timestamp}`,\n\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: {},\n\n      renderer: null,\n\n      svgBorderGradient: [],\n\n      details: '',\n\n      waves: [],\n\n      animation: false\n    }\n  },\n  computed: {\n    radius () {\n      const { shape } = this.mergedConfig\n\n      if (shape === 'round') return '50%'\n\n      if (shape === 'rect') return '0'\n\n      if (shape === 'roundRect') return '10px'\n\n      return '0'\n    },\n    shape () {\n      const { shape } = this.mergedConfig\n\n      if (!shape) return 'rect'\n\n      return shape\n    }\n  },\n  watch: {\n    config () {\n      const { calcData, renderer } = this\n\n      renderer.delAllGraph()\n\n      this.waves = []\n\n      setTimeout(calcData, 0)\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, config, calcData } = this\n\n      initRender()\n\n      if (!config) return\n\n      calcData()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['water-pond-level'])\n    },\n    calcData () {\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\n\n      mergeConfig()\n\n      calcSvgBorderGradient()\n\n      calcDetails()\n\n      const { addWave, animationWave } = this\n\n      addWave()\n\n      animationWave()\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\n    },\n    calcSvgBorderGradient () {\n      const { colors } = this.mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    calcDetails () {\n      const { data, formatter } = this.mergedConfig\n\n      if (!data.length) {\n        this.details = ''\n\n        return\n      }\n\n      const maxValue = Math.max(...data)\n\n      this.details = formatter.replace('{value}', maxValue)\n    },\n    addWave () {\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\n\n      const shapes = getWaveShapes()\n      const style = getWaveStyle()\n\n      this.waves = shapes.map(shape => renderer.add({\n        name: 'smoothline',\n        animationFrame: 300,\n        shape,\n        style,\n        drawed\n      }))\n    },\n    getWaveShapes () {\n      const { mergedConfig, renderer, mergeOffset } = this\n\n      const { waveNum, waveHeight, data } = mergedConfig\n\n      const [w, h] = renderer.area\n\n      const pointsNum = waveNum * 4 + 4\n\n      const pointXGap = w / waveNum / 2\n\n      return data.map(v => {\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\n          const x = w - pointXGap * j\n\n          const startY = (1 - v / 100) * h\n\n          const y = j % 2 === 0 ? startY : startY - waveHeight\n\n          return [x, y]\n        })\n\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\n\n        return { points }\n      })\n    },\n    mergeOffset ([x, y], [ox, oy]) {\n      return [x + ox, y + oy]\n    },\n    getWaveStyle () {\n      const { renderer, mergedConfig } = this\n\n      const h = renderer.area[1]\n\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      }\n    },\n    drawed ({ shape: { points } }, { ctx, area }) {\n      const firstPoint = points[0]\n      const lastPoint = points.slice(-1)[0]\n\n      const h = area[1]\n\n      ctx.lineTo(lastPoint[0], h)\n      ctx.lineTo(firstPoint[0], h)\n\n      ctx.closePath()\n\n      ctx.fill()\n    },\n    async animationWave (repeat = 1) {\n      const { waves, renderer, animation } = this\n\n      if (animation) return\n\n      this.animation = true\n\n      const w = renderer.area[0]\n\n      waves.forEach(graph => {\n        graph.attr('style', { translate: [0, 0] })\n\n        graph.animation('style', {\n          translate: [w, 0]\n        }, true)\n      })\n\n      await renderer.launchAnimation()\n\n      this.animation = false\n\n      if (!renderer.graphs.length) return\n\n      this.animationWave(repeat + 1)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { renderer } = this\n\n    renderer.delAllGraph()\n\n    this.waves = []\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src"}]}
{"remainingRequest":"D:\\MUI\\项目\\Tour\\node_modules\\babel-loader\\lib\\index.js!D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\MUI\\项目\\Tour\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MUI\\项目\\Tour\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollBoard\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\MUI\\项目\\Tour\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollBoard\\src\\main.vue","mtime":499162500000},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579498857582},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\babel-loader\\lib\\index.js","mtime":1579498894804},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1579498857582},{"path":"D:\\MUI\\项目\\Tour\\node_modules\\vue-loader\\lib\\index.js","mtime":1579498888268}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\MUI\\\\\\u9879\\u76EE\\\\Tour\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.array.reduce\";\nimport _objectSpread from \"D:\\\\MUI\\\\\\u9879\\u76EE\\\\Tour\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.map\";\nimport _toConsumableArray from \"D:\\\\MUI\\\\\\u9879\\u76EE\\\\Tour\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport autoResize from \"../../../mixin/autoResize\";\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvScrollBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      ref: 'scroll-board',\n      defaultConfig: {\n        /**\n         * @description Board header\n         * @type {Array<String>}\n         * @default header = []\n         * @example header = ['column1', 'column2', 'column3']\n         */\n        header: [],\n\n        /**\n         * @description Board data\n         * @type {Array<Array>}\n         * @default data = []\n         */\n        data: [],\n\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n\n        /**\n         * @description Header background color\n         * @type {String}\n         * @default headerBGC = '#00BAFF'\n         */\n        headerBGC: '#00BAFF',\n\n        /**\n         * @description Odd row background color\n         * @type {String}\n         * @default oddRowBGC = '#003B51'\n         */\n        oddRowBGC: '#003B51',\n\n        /**\n         * @description Even row background color\n         * @type {String}\n         * @default evenRowBGC = '#003B51'\n         */\n        evenRowBGC: '#0A2732',\n\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n\n        /**\n         * @description Header height\n         * @type {Number}\n         * @default headerHeight = 35\n         */\n        headerHeight: 35,\n\n        /**\n         * @description Column width\n         * @type {Array<Number>}\n         * @default columnWidth = []\n         */\n        columnWidth: [],\n\n        /**\n         * @description Column align\n         * @type {Array<String>}\n         * @default align = []\n         * @example align = ['left', 'center', 'right']\n         */\n        align: [],\n\n        /**\n         * @description Show index\n         * @type {Boolean}\n         * @default index = false\n         */\n        index: false,\n\n        /**\n         * @description index Header\n         * @type {String}\n         * @default indexHeader = '#'\n         */\n        indexHeader: '#',\n\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single'\n      },\n      mergedConfig: null,\n      header: [],\n      rowsData: [],\n      rows: [],\n      widths: [],\n      heights: [],\n      avgHeight: 0,\n      aligns: [],\n      animationIndex: 0,\n      animationHandler: '',\n      updater: 0\n    };\n  },\n  watch: {\n    config: function config() {\n      var stopAnimation = this.stopAnimation,\n          calcData = this.calcData;\n      stopAnimation();\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit: function afterAutoResizeMixinInit() {\n      var calcData = this.calcData;\n      calcData();\n    },\n    onResize: function onResize() {\n      var mergedConfig = this.mergedConfig,\n          calcWidths = this.calcWidths,\n          calcHeights = this.calcHeights;\n      if (!mergedConfig) return;\n      calcWidths();\n      calcHeights();\n    },\n    calcData: function calcData() {\n      var mergeConfig = this.mergeConfig,\n          calcHeaderData = this.calcHeaderData,\n          calcRowsData = this.calcRowsData;\n      mergeConfig();\n      calcHeaderData();\n      calcRowsData();\n      var calcWidths = this.calcWidths,\n          calcHeights = this.calcHeights,\n          calcAligns = this.calcAligns;\n      calcWidths();\n      calcHeights();\n      calcAligns();\n      var animation = this.animation;\n      animation(true);\n    },\n    mergeConfig: function mergeConfig() {\n      var config = this.config,\n          defaultConfig = this.defaultConfig;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    calcHeaderData: function calcHeaderData() {\n      var _this$mergedConfig = this.mergedConfig,\n          header = _this$mergedConfig.header,\n          index = _this$mergedConfig.index,\n          indexHeader = _this$mergedConfig.indexHeader;\n\n      if (!header.length) {\n        this.header = [];\n        return;\n      }\n\n      header = _toConsumableArray(header);\n      if (index) header.unshift(indexHeader);\n      this.header = header;\n    },\n    calcRowsData: function calcRowsData() {\n      var _this$mergedConfig2 = this.mergedConfig,\n          data = _this$mergedConfig2.data,\n          index = _this$mergedConfig2.index,\n          headerBGC = _this$mergedConfig2.headerBGC,\n          rowNum = _this$mergedConfig2.rowNum;\n\n      if (index) {\n        data = data.map(function (row, i) {\n          row = _toConsumableArray(row);\n          var indexTag = \"<span class=\\\"index\\\" style=\\\"background-color: \".concat(headerBGC, \";\\\">\").concat(i + 1, \"</span>\");\n          row.unshift(indexTag);\n          return row;\n        });\n      }\n\n      data = data.map(function (ceils, i) {\n        return {\n          ceils: ceils,\n          rowIndex: i\n        };\n      });\n      var rowLength = data.length;\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [].concat(_toConsumableArray(data), _toConsumableArray(data));\n      }\n\n      data = data.map(function (d, i) {\n        return _objectSpread({}, d, {\n          scroll: i\n        });\n      });\n      this.rowsData = data;\n      this.rows = data;\n    },\n    calcWidths: function calcWidths() {\n      var width = this.width,\n          mergedConfig = this.mergedConfig,\n          rowsData = this.rowsData;\n      var columnWidth = mergedConfig.columnWidth,\n          header = mergedConfig.header;\n      var usedWidth = columnWidth.reduce(function (all, w) {\n        return all + w;\n      }, 0);\n      var columnNum = 0;\n\n      if (rowsData[0]) {\n        columnNum = rowsData[0].ceils.length;\n      } else if (header.length) {\n        columnNum = header.length;\n      }\n\n      var avgWidth = (width - usedWidth) / (columnNum - columnWidth.length);\n      var widths = new Array(columnNum).fill(avgWidth);\n      this.widths = deepMerge(widths, columnWidth);\n    },\n    calcHeights: function calcHeights() {\n      var onresize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var height = this.height,\n          mergedConfig = this.mergedConfig,\n          header = this.header;\n      var headerHeight = mergedConfig.headerHeight,\n          rowNum = mergedConfig.rowNum,\n          data = mergedConfig.data;\n      var allHeight = height;\n      if (header.length) allHeight -= headerHeight;\n      var avgHeight = allHeight / rowNum;\n      this.avgHeight = avgHeight;\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight);\n    },\n    calcAligns: function calcAligns() {\n      var header = this.header,\n          mergedConfig = this.mergedConfig;\n      var columnNum = header.length;\n      var aligns = new Array(columnNum).fill('left');\n      var align = mergedConfig.align;\n      this.aligns = deepMerge(aligns, align);\n    },\n    animation: function () {\n      var _animation = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this$heights;\n\n        var start,\n            avgHeight,\n            animationIndex,\n            mergedConfig,\n            rowsData,\n            animation,\n            updater,\n            waitTime,\n            carousel,\n            rowNum,\n            rowLength,\n            animationNum,\n            rows,\n            back,\n            _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                start = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n                avgHeight = this.avgHeight, animationIndex = this.animationIndex, mergedConfig = this.mergedConfig, rowsData = this.rowsData, animation = this.animation, updater = this.updater;\n                waitTime = mergedConfig.waitTime, carousel = mergedConfig.carousel, rowNum = mergedConfig.rowNum;\n                rowLength = rowsData.length;\n\n                if (!(rowNum >= rowLength)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                if (!start) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 9;\n                return new Promise(function (resolve) {\n                  return setTimeout(resolve, waitTime);\n                });\n\n              case 9:\n                if (!(updater !== this.updater)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 11:\n                animationNum = carousel === 'single' ? 1 : rowNum;\n                rows = rowsData.slice(animationIndex);\n                rows.push.apply(rows, _toConsumableArray(rowsData.slice(0, animationIndex)));\n                this.rows = rows;\n                this.heights = new Array(rowLength).fill(avgHeight);\n                _context.next = 18;\n                return new Promise(function (resolve) {\n                  return setTimeout(resolve, 300);\n                });\n\n              case 18:\n                if (!(updater !== this.updater)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 20:\n                (_this$heights = this.heights).splice.apply(_this$heights, [0, animationNum].concat(_toConsumableArray(new Array(animationNum).fill(0))));\n\n                animationIndex += animationNum;\n                back = animationIndex - rowLength;\n                if (back >= 0) animationIndex = back;\n                this.animationIndex = animationIndex;\n                this.animationHandler = setTimeout(animation, waitTime - 300);\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function animation() {\n        return _animation.apply(this, arguments);\n      }\n\n      return animation;\n    }(),\n    stopAnimation: function stopAnimation() {\n      var animationHandler = this.animationHandler,\n          updater = this.updater;\n      this.updater = (updater + 1) % 999999;\n      if (!animationHandler) return;\n      clearTimeout(animationHandler);\n    },\n    emitEvent: function emitEvent(ri, ci, row, ceil) {\n      var ceils = row.ceils,\n          rowIndex = row.rowIndex;\n      this.$emit('click', {\n        row: ceils,\n        ceil: ceil,\n        rowIndex: rowIndex,\n        columnIndex: ci\n      });\n    }\n  },\n  destroyed: function destroyed() {\n    var stopAnimation = this.stopAnimation;\n    stopAnimation();\n  }\n};",{"version":3,"sources":["main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,OAAA,UAAA;AAEA,SAAA,SAAA,QAAA,kCAAA;AAEA,SAAA,SAAA,QAAA,qCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,MAAA,EAAA,CAAA,UAAA,CAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA;AADA,GAHA;AASA,EAAA,IATA,kBASA;AACA,WAAA;AACA,MAAA,GAAA,EAAA,cADA;AAGA,MAAA,aAAA,EAAA;AACA;;;;;;AAMA,QAAA,MAAA,EAAA,EAPA;;AAQA;;;;;AAKA,QAAA,IAAA,EAAA,EAbA;;AAcA;;;;;AAKA,QAAA,MAAA,EAAA,CAnBA;;AAoBA;;;;;AAKA,QAAA,SAAA,EAAA,SAzBA;;AA0BA;;;;;AAKA,QAAA,SAAA,EAAA,SA/BA;;AAgCA;;;;;AAKA,QAAA,UAAA,EAAA,SArCA;;AAsCA;;;;;AAKA,QAAA,QAAA,EAAA,IA3CA;;AA4CA;;;;;AAKA,QAAA,YAAA,EAAA,EAjDA;;AAkDA;;;;;AAKA,QAAA,WAAA,EAAA,EAvDA;;AAwDA;;;;;;AAMA,QAAA,KAAA,EAAA,EA9DA;;AA+DA;;;;;AAKA,QAAA,KAAA,EAAA,KApEA;;AAqEA;;;;;AAKA,QAAA,WAAA,EAAA,GA1EA;;AA2EA;;;;;;AAMA,QAAA,QAAA,EAAA;AAjFA,OAHA;AAuFA,MAAA,YAAA,EAAA,IAvFA;AAyFA,MAAA,MAAA,EAAA,EAzFA;AA2FA,MAAA,QAAA,EAAA,EA3FA;AA6FA,MAAA,IAAA,EAAA,EA7FA;AA+FA,MAAA,MAAA,EAAA,EA/FA;AAiGA,MAAA,OAAA,EAAA,EAjGA;AAmGA,MAAA,SAAA,EAAA,CAnGA;AAqGA,MAAA,MAAA,EAAA,EArGA;AAuGA,MAAA,cAAA,EAAA,CAvGA;AAyGA,MAAA,gBAAA,EAAA,EAzGA;AA2GA,MAAA,OAAA,EAAA;AA3GA,KAAA;AA6GA,GAvHA;AAwHA,EAAA,KAAA,EAAA;AACA,IAAA,MADA,oBACA;AAAA,UACA,aADA,GACA,IADA,CACA,aADA;AAAA,UACA,QADA,GACA,IADA,CACA,QADA;AAGA,MAAA,aAAA;AAEA,MAAA,QAAA;AACA;AAPA,GAxHA;AAiIA,EAAA,OAAA,EAAA;AACA,IAAA,wBADA,sCACA;AAAA,UACA,QADA,GACA,IADA,CACA,QADA;AAGA,MAAA,QAAA;AACA,KALA;AAMA,IAAA,QANA,sBAMA;AAAA,UACA,YADA,GACA,IADA,CACA,YADA;AAAA,UACA,UADA,GACA,IADA,CACA,UADA;AAAA,UACA,WADA,GACA,IADA,CACA,WADA;AAGA,UAAA,CAAA,YAAA,EAAA;AAEA,MAAA,UAAA;AAEA,MAAA,WAAA;AACA,KAdA;AAeA,IAAA,QAfA,sBAeA;AAAA,UACA,WADA,GACA,IADA,CACA,WADA;AAAA,UACA,cADA,GACA,IADA,CACA,cADA;AAAA,UACA,YADA,GACA,IADA,CACA,YADA;AAGA,MAAA,WAAA;AAEA,MAAA,cAAA;AAEA,MAAA,YAAA;AAPA,UASA,UATA,GASA,IATA,CASA,UATA;AAAA,UASA,WATA,GASA,IATA,CASA,WATA;AAAA,UASA,UATA,GASA,IATA,CASA,UATA;AAWA,MAAA,UAAA;AAEA,MAAA,WAAA;AAEA,MAAA,UAAA;AAfA,UAiBA,SAjBA,GAiBA,IAjBA,CAiBA,SAjBA;AAmBA,MAAA,SAAA,CAAA,IAAA,CAAA;AACA,KAnCA;AAoCA,IAAA,WApCA,yBAoCA;AAAA,UACA,MADA,GACA,IADA,CACA,MADA;AAAA,UACA,aADA,GACA,IADA,CACA,aADA;AAGA,WAAA,YAAA,GAAA,SAAA,CAAA,SAAA,CAAA,aAAA,EAAA,IAAA,CAAA,EAAA,MAAA,IAAA,EAAA,CAAA;AACA,KAxCA;AAyCA,IAAA,cAzCA,4BAyCA;AAAA,+BACA,KAAA,YADA;AAAA,UACA,MADA,sBACA,MADA;AAAA,UACA,KADA,sBACA,KADA;AAAA,UACA,WADA,sBACA,WADA;;AAGA,UAAA,CAAA,MAAA,CAAA,MAAA,EAAA;AACA,aAAA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","sourcesContent":["<template>\n  <div class=\"dv-scroll-board\" :ref=\"ref\">\n    <div class=\"header\" v-if=\"header.length && mergedConfig\" :style=\"`background-color: ${mergedConfig.headerBGC};`\">\n      <div\n        class=\"header-item\"\n        v-for=\"(headerItem, i) in header\"\n        :key=\"headerItem + i\"\n        :style=\"`\n          height: ${mergedConfig.headerHeight}px;\n          line-height: ${mergedConfig.headerHeight}px;\n          width: ${widths[i]}px;\n        `\"\n        :align=\"aligns[i]\"\n        v-html=\"headerItem\"\n      />\n    </div>\n\n    <div\n      v-if=\"mergedConfig\"\n      class=\"rows\"\n      :style=\"`height: ${height - (header.length ? mergedConfig.headerHeight : 0)}px;`\"\n    >\n      <div\n        class=\"row-item\"\n        v-for=\"(row, ri) in rows\"\n        :key=\"row.toString() + row.scroll\"\n        :style=\"`\n          height: ${heights[ri]}px;\n          line-height: ${heights[ri]}px;\n          background-color: ${mergedConfig[row.rowIndex % 2 === 0 ? 'evenRowBGC' : 'oddRowBGC']};\n        `\"\n      >\n        <div\n          class=\"ceil\"\n          v-for=\"(ceil, ci) in row.ceils\"\n          :key=\"ceil + ri + ci\"\n          :style=\"`width: ${widths[ci]}px;`\"\n          :align=\"aligns[ci]\"\n          v-html=\"ceil\"\n          @click=\"emitEvent(ri, ci, row, ceil)\"\n        />\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-board',\n\n      defaultConfig: {\n        /**\n         * @description Board header\n         * @type {Array<String>}\n         * @default header = []\n         * @example header = ['column1', 'column2', 'column3']\n         */\n        header: [],\n        /**\n         * @description Board data\n         * @type {Array<Array>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Header background color\n         * @type {String}\n         * @default headerBGC = '#00BAFF'\n         */\n        headerBGC: '#00BAFF',\n        /**\n         * @description Odd row background color\n         * @type {String}\n         * @default oddRowBGC = '#003B51'\n         */\n        oddRowBGC: '#003B51',\n        /**\n         * @description Even row background color\n         * @type {String}\n         * @default evenRowBGC = '#003B51'\n         */\n        evenRowBGC: '#0A2732',\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Header height\n         * @type {Number}\n         * @default headerHeight = 35\n         */\n        headerHeight: 35,\n        /**\n         * @description Column width\n         * @type {Array<Number>}\n         * @default columnWidth = []\n         */\n        columnWidth: [],\n        /**\n         * @description Column align\n         * @type {Array<String>}\n         * @default align = []\n         * @example align = ['left', 'center', 'right']\n         */\n        align: [],\n        /**\n         * @description Show index\n         * @type {Boolean}\n         * @default index = false\n         */\n        index: false,\n        /**\n         * @description index Header\n         * @type {String}\n         * @default indexHeader = '#'\n         */\n        indexHeader: '#',\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single'\n      },\n\n      mergedConfig: null,\n\n      header: [],\n\n      rowsData: [],\n\n      rows: [],\n\n      widths: [],\n\n      heights: [],\n\n      avgHeight: 0,\n\n      aligns: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcWidths, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcWidths()\n\n      calcHeights()\n    },\n    calcData () {\n      const { mergeConfig, calcHeaderData, calcRowsData } = this\n\n      mergeConfig()\n\n      calcHeaderData()\n\n      calcRowsData()\n\n      const { calcWidths, calcHeights, calcAligns } = this\n\n      calcWidths()\n\n      calcHeights()\n\n      calcAligns()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcHeaderData () {\n      let { header, index, indexHeader} = this.mergedConfig\n\n      if (!header.length) {\n        this.header = []\n\n        return\n      }\n\n      header = [...header]\n\n      if (index) header.unshift(indexHeader)\n\n      this.header = header\n    },\n    calcRowsData () {\n      let { data, index, headerBGC, rowNum } = this.mergedConfig\n\n      if (index) {\n        data = data.map((row, i) => {\n          row = [...row]\n\n          const indexTag = `<span class=\"index\" style=\"background-color: ${headerBGC};\">${i + 1}</span>`\n\n          row.unshift(indexTag)\n\n          return row\n        })\n      }\n\n      data = data.map((ceils, i) => ({ ceils, rowIndex: i }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcWidths () {\n      const { width, mergedConfig, rowsData } = this\n\n      const { columnWidth, header } = mergedConfig\n\n      const usedWidth = columnWidth.reduce((all, w) => all + w, 0)\n\n      let columnNum = 0\n      if (rowsData[0]) {\n        columnNum = rowsData[0].ceils.length\n      } else if (header.length) {\n        columnNum = header.length\n      }\n\n      const avgWidth = (width - usedWidth) / (columnNum - columnWidth.length)\n\n      const widths = new Array(columnNum).fill(avgWidth)\n\n      this.widths = deepMerge(widths, columnWidth)\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig, header } = this\n\n      const { headerHeight, rowNum, data } = mergedConfig\n\n      let allHeight = height\n\n      if (header.length) allHeight -= headerHeight\n\n      const avgHeight = allHeight / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    calcAligns () {\n      const { header, mergedConfig } = this\n\n      const columnNum = header.length\n\n      let aligns = new Array(columnNum).fill('left')\n\n      const { align } = mergedConfig\n\n      this.aligns = deepMerge(aligns, align)\n    },\n    async animation (start = false) {\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    },\n    emitEvent (ri, ci, row, ceil) {\n      const { ceils, rowIndex } = row\n\n      this.$emit('click', {\n        row: ceils,\n        ceil,\n        rowIndex,\n        columnIndex: ci\n      })\n    }\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/scrollBoard/src"}]}